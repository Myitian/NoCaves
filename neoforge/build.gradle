import net.fabricmc.loom.LoomGradleExtension
import net.fabricmc.loom.util.aw2at.Aw2At

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

base {
    archivesName = "${project.mod_id}-neoforge-${project.minecraft_version}"
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.properties props

    filesMatching(["META-INF/pack.mcmeta", "META-INF/*mods.toml"]) {
        expand props
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

afterEvaluate {
//  copied from Aw2At.setup
    LoomGradleExtension extension = LoomGradleExtension.get(project);
    if (extension.getAccessWidenerPath().isPresent()) {
        // Find the relative AW file name
        String awName = null;
        java.nio.file.Path awPath = extension.getAccessWidenerPath().get().getAsFile().toPath();
        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);
        SourceSet main = sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME);
        boolean found = false;
        for (File srcDir : main.getResources().getSrcDirs()) {
            java.nio.file.Path srcDirPath = srcDir.toPath().toAbsolutePath();
            if (awPath.startsWith(srcDirPath)) {
                awName = srcDirPath.relativize(awPath).toString().replace(File.separator, "/");
                found = true;
                break;
            }
        }
        if (!found) {
            awName = awPath.getFileName().toString();
        }
        remapJar.getAtAccessWideners().add(awName);
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }
    repositories {
    }
}